---
name: Shippable Build & Signing
on:
  workflow_call:
  workflow_dispatch:
    inputs:
      skipThunderbird:
        type: boolean
        description: Skip building Thunderbird
      skipK9Mail:
        type: boolean
        description: Skip building K-9 Mail
      skipTests:
        type: boolean
        description: Skip running tests
      skipBetaBump:
        type: boolean
        description: Skip version bump (beta)
      skipGooglePlay:
        type: boolean
        description: Skip Google Play publish
      draftGooglePlay:
        type: boolean
        description: Leave Play Store version in draft state
      skipFtp:
        type: boolean
        description: Skip FTP upload
      uploadFtpStage:
        type: boolean
        description: Upload to FTP stage instead of prod

jobs:
  get_environment:
    name: Determine Release Environment
    runs-on: ubuntu-latest
    outputs:
      releaseEnv: ${{ steps.releaseEnv.outputs.result }}
    steps:
      - uses: actions/github-script@v7
        id: releaseEnv
        with:
          result-encoding: string
          script: |
            const RELEASE_ENVS = {
              "refs/heads/main": "thunderbird_daily",
              "refs/heads/beta": "thunderbird_beta",
              "refs/heads/release": "thunderbird_release",
            };

            if (context.ref in RELEASE_ENVS) {
              return RELEASE_ENVS[context.ref];
            } else {
              core.setFailed(`Unknown branch ${context.ref} for shippable builds!`)
              return "";
            }

  dump_config:
    name: Show Release Environment
    runs-on: ubuntu-latest
    needs: get_environment
    environment: ${{ needs.get_environment.outputs.releaseEnv }}
    outputs:
      matrixInclude: ${{ steps.dump.outputs.matrixInclude }}
      releaseDate: ${{ steps.dump.outputs.releaseDate }}
      releaseType: ${{ vars.RELEASE_TYPE }}
    steps:
      - name: Show Environment
        uses: actions/github-script@v7
        id: dump
        env:
          matrixInclude: ${{ vars.MATRIX_INCLUDE }}
          releaseType: ${{ vars.RELEASE_TYPE }}
          skipThunderbird: ${{ inputs.skipThunderbird }}
          skipK9Mail: ${{ inputs.skipK9Mail }}
          skipTests: ${{ inputs.skipTests }}
          skipBetaBump: ${{ inputs.skipBetaBump }}
          skipGooglePlay: ${{ inputs.skipGooglePlay }}
          draftGooglePlay: ${{ inputs.draftGooglePlay }}
          skipFtp: ${{ inputs.skipFtp }}
          uploadFtpStage: ${{ inputs.uploadFtpStage }}
        with:
          script: |
            const NOW = new Date();
            let matrix = JSON.parse(process.env.matrixInclude);
            let skipThunderbird = process.env.skipThunderbird == "true";
            let skipK9Mail = process.env.skipK9Mail == "true";

            if (!matrix.every(item => !!item.appName && !!item.packageFormat)) {
              core.setFailed("MATRIX_INCLUDE is missing appName or packageFormat");
            }

            let matrixFull = matrix.filter(item => {
              return !((item.appName == "k9mail" && skipK9Mail) ||
                       (item.appName == "thunderbird" && skipThunderbird));
            });

            if (!matrixFull.length) {
              core.setFailed("There are no builds to run");
              return;
            }

            core.setOutput("releaseDate", NOW.toString());
            core.setOutput("matrixInclude", matrixFull);

            await core.summary
              .addRaw(`Beginning a <b>${process.env.releaseType}</b> build with the following configurations:`, true)
              .addTable([
                [
                  { data: "App Name", header: true },
                  { data: "Flavor", header: true },
                  { data: "Format", header: true },
                  { data: "Release Target", header: true },
                  { data: "Play Store Track", header: true },
                ],
                ...matrixFull.map(item => [
                  { data: item.appName },
                  { data: item.packageFlavor },
                  { data: item.packageFormat },
                  { data: item.releaseTarget?.replace(/\|/g, ", ") || "artifact only" },
                  { data: item.playTargetTrack || "none" },
                ])
              ])
              .write();

              if (skipThunderbird) {
                await core.summary.addList(["Thunderbird build is being skipped"]).write();
              }
              if (skipK9Mail) {
                await core.summary.addList(["K-9 Mail build is being skipped"]).write();
              }
              if (process.env.skipTests == "true") {
                await core.summary.addList(["Tests are being skipped"]).write();
              }
              if (process.env.skipBetaBump == "true" && process.env.releaseType == "beta") {
                await core.summary.addList(["Beta bump is being skipped"]).write();
              }
              if (process.env.skipGooglePlay == "true") {
                await core.summary.addList(["Play Store upload is being skipped"]).write();
              }
              if (process.env.skipGooglePlay != "true" && process.env.draftGooglePlay == "true") {
                await core.summary.addList(["Play Store upload is being kept in the draft state"]).write();
              }
              if (process.env.skipFtp == "true") {
                await core.summary.addList(["FTP upload is being skipped"]).write();
              } else if (process.env.uploadFtpStage == "true") {
                await core.summary.addList(["FTP upload destination is stage (ftp.stage.mozaws.net)"]).write();
              } else if (process.env.uploadFtpStage == "false") {
                await core.summary.addList(["FTP upload destination is prod (ftp.mozilla.org)"]).write();
              }

      - name: Summary
        uses: actions/github-script@v7
        id: summary
        env:
          releaseTarget: ${{ matrix.releaseTarget }}
          skipFtp: ${{ inputs.skipFtp }}
          packageFormat: ${{ matrix.packageFormat }}
        with:
          script: |
            if (process.env.skipFtp != "true" && process.env.releaseTarget.includes("ftp") && process.env.packageFormat == 'apk') {
              await core.summary
                .addRaw(`Published to FTP at`)
                .addLink("www.example.com", "www.example.com")
                .addEOL();
              await core.summary.write();
            }
